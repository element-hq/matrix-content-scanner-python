[build-system]
requires = ["poetry-core", "wheel", "setuptools-rust"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 88
target-version = "py38"

[tool.ruff.lint]
# See https://beta.ruff.rs/docs/rules/#error-e
# for error codes. The ones we ignore are:
#  E501: line too long (we don't normally run this check in other projects such as Synapse)
#  E731: do not assign a lambda expression, use a def
#
# flake8-bugbear compatible checks. Its error codes are described at
# https://beta.ruff.rs/docs/rules/#flake8-bugbear-b
#  B023: Functions defined inside a loop must not use variables redefined in the loop
ignore = [
    "B023",
    "E501",
    "E731",
]
select = [
    # pycodestyle
    "E",
    "W",
    # pyflakes
    "F",
    # isort
    "I001",
    # flake8-bugbear
    "B0",
    # flake8-comprehensions
    "C4",
    # flake8-2020
    "YTT",
    # flake8-slots
    "SLOT",
    # flake8-debugger
    "T10",
    # flake8-pie
    "PIE",
    # flake8-executable
    "EXE",
]

[tool.ruff.lint.isort]
combine-as-imports = true
section-order = ["future", "standard-library", "third-party", "twisted", "first-party", "testing", "local-folder"]
known-first-party = ["matrix_content_scanner"]

[tool.ruff.lint.isort.sections]
twisted = ["twisted", "OpenSSL"]
testing = ["tests"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.maturin]
manifest-path = "rust/Cargo.toml"
module-name = "matrix_content_scanner.mcs_rust"

[tool.poetry]
name = "matrix_content_scanner"
version = "1.2.1"
description = "A web service for scanning media hosted by a Matrix media repository"
authors = ["Element Backend Team <team-backend-synapse@element.io>"]
readme = "README.md"
license = "AGPL-3.0-only OR LicenseRef-Element-Commercial"
# Python version and licence classifiers are set automatically by Poetry
classifiers = []
include = [
    { path = "mypy.ini", format = "sdist" },
    { path = "scripts-dev", format = "sdist" },
    { path = "tests", format = "sdist" },
    { path = "Cargo.toml", format = "sdist" },
    { path = "Cargo.lock", format = "sdist" },
    { path = "rust/Cargo.toml", format = "sdist" },
    { path = "rust/build.rs", format = "sdist" },
    { path = "rust/src/**", format = "sdist" },
]
exclude = [
    { path = "src/*.so", format = "sdist"}
]

[tool.poetry.dependencies]
python = "^3.10.0"
attrs = ">=19.2.0"
aiohttp = ">=3.8.0"
jsonschema = ">=4.23.0"
pyyaml = ">=5.1.1"
# Required for decrypting files"
python-magic = ">=0.4.15,<0.5"
# Required for maintaining the result cache.
cachetools = ">=5.4.0"
# Required for processing user-defined values such as durations or sizes.
humanfriendly = ">=10.0"
# Required for calculating cache keys deterministically. Type annotations aren't
# discoverable in versions older than 1.6.3.
canonicaljson = ">=1.6.3"
setuptools_rust = ">=1.3"

[tool.poetry.dev-dependencies]
# for linting and formatting
ruff = "^0.7.2"
# for type checking
mypy = "*"
types-jsonschema = ">=3.2.0"
types-PyYAML = ">=5.4.10"
types-cachetools = "*"
types-humanfriendly = "*"

[tool.poetry.build]
script = "build_rust.py"
generate-setup-file = true

[tool.poetry.urls]
homepage = "https://github.com/element-hq/matrix-content-scanner"
documentation = "https://github.com/element-hq/matrix-content-scanner/blob/main/README.md"
repository = "https://github.com/element-hq/matrix-content-scanner.git"

[tool.poetry.scripts]
matrix-content-scanner = "matrix_content_scanner.mcs:main"
